install.packages("corrplot")
install.packages("ggplot2")
install.packages("caret")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
install.packages("caTools")
install.packages("rattle")
install.packages("gridExtra")
install.packages("ROCR")
install.packages("randomForest")
install.packages("randomForestSRC")
install.packages("reshape2")
install.packages("RColorBrewer")
setwd("~/DA_assignment")
data<- read.csv("empatt.csv")
head(data)
str(data)
sum(is.na(data))
badCols <- nearZeroVar(data
)
library(readxl)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(rpart)
library(rpart.plot)
library(e1071)
library(caTools)
library(rattle)
library(gridExtra)
library(ROCR)
library(ipred)
library(gbm)
library(C50)
library(randomForest)
library(randomForestSRC)
library(reshape2)
library(RColorBrewer)
library(readxl)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(rpart)
library(rpart.plot)
library(e1071)
library(caTools)
library(rattle)
library(gridExtra)
library(ROCR)
library(ipred)
library(gbm)
library(C50)
library(randomForest)
library(randomForestSRC)
library(reshape2)
library(RColorBrewer)
install.packages("C50")
install.packages("gbm")
library(gbm)
library(C50)
library(gbm)
library(C50)
library(reshape2)
library(RColorBrewer)
head(data)
str(data)
sum(is.na(data))
badCols <- nearZeroVar(data)
data$EmployeeNumber=data$Over18=data$EmployeeCount=data$StandardHours = NULL
p1= qplot(BusinessTravel,data = data,geom="auto")
p2 = qplot(Gender, data=data,geom="auto")
grid.arrange(p1,p2,nrow=1,ncol=2)
View(data)
p1= qplot(BusinessTravel,data = data,geom="auto")
p2 = qplot(Gender, data=data,geom="auto")
p3 = qplot(JobLevel, data=data,geom="auto")
p4 = qplot(JobSatisfaction, data=data,geom="auto")
p5 = qplot(NumCompaniesWorked, data=data,geom="auto")
p6 = qplot(OverTime, data=data,geom="auto")
p7 = qplot(TotalWorkingYears, data=data,geom="auto")
p8 = qplot(YearsSinceLastPromotion, data=data,geom="auto")
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,nrow=4,ncol=2)
barplot(plottable1, main="Employees left vs Job Level", xlab="JobLevel",col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
barplot(plottable1, main="Employees left vs Job Level", xlab="JobLevel",col=c("Blue","Yellow"),beside = TRUE)
plottable1=table(data$Attrition,data$JobLevel)
plottable2=table(data$Attrition,data$OverTime)
plottable3=table(data$Attrition,data$EnvironmentSatisfaction)
plottable4=table(data$Attrition,data$JobInvolvement)
plottable6=table(data$Attrition,data$JobSatisfaction)
plottable5=table(data$Attrition,data$PercentSalaryHike)
plottable7=table(data$Attrition,data$WorkLifeBalance)
plottable8=table(data$Attrition,data$YearsAtCompany)
plottable9=table(data$Attrition,data$YearsInCurrentRole)
plottable10=table(data$Attrition,data$TotalWorkingYears)
barplot(plottable1, main="Employees left vs Job Level", xlab="JobLevel",col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
barplot(plottable2, main="Employees left vs OverTime", xlab="OverTime",col=c("Blue","Yellow"),legend=rownames(plottable2),beside = TRUE)
barplot(plottable3, main="Employees left vs Environment Satisfaction", xlab="JobLevel", col=c("Blue","Yellow"),beside = TRUE)
barplot(plottable4, main="Employees left vs Job Involvement", xlab="Job Involvement", col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
install.packages("ipred")
library(ipred)
barplot(plottable5, main="Employees left vs salary hike", xlab="salary hike in %", col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
barplot(plottable6, main="Employees left vs JobSatisfaction", xlab="JobSatisfaction",col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
barplot(plottable7, main="Employees left vs Work Life Balance", xlab="Work Life Balance", col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
barplot(plottable8, main="Employees left vs Num of Years at Company", xlab="Num of Years", col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
barplot(plottable9, main="Employees left vs Years in current Role", xlab="Years In Current Role ", col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
barplot(plottable10, main="Employees left vs Total Working Years", xlab="Total Working Years", col=c("Blue","Yellow"),legend=rownames(plottable1),beside = TRUE)
fit1 <- rpart(Attrition~., data=data, cp = .005)
library(rpart)
library(rpart)
fit1 <- rpart(Attrition~., data=data, cp = .005)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 0.5, extra = 100)
library(rpart.plot)
library(rpart.plot)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 0.5, extra = 100)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
binary.model <- rpart(Attrition~OverTime+JobLevel+JobSatisfaction, data=data, cp = .005)
rpart.plot(binary.model,type=1, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
rpart.plot(binary.model,type=0, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
rpart.plot(binary.model,type=2, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
fit1 <- rpart(Attrition~., data=data, cp = .05)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
fit1 <- rpart(Attrition~., data=data, cp = .01)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
binary.model <- rpart(Attrition~OverTime+JobLevel+JobSatisfaction, data=data, cp = .001)
rpart.plot(binary.model,type=2, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
binary.model <- rpart(Attrition~OverTime+JobLevel+JobSatisfaction, data=data, cp = .01)
rpart.plot(binary.model,type=2, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
rpart.plot(binary.model,type=2, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,nrow=4,ncol=2)
setwd("~/DA_assignment")
data<- read.csv("empatt.csv")
data$EmployeeNumber=data$Over18=data$EmployeeCount=data$StandardHours = NULL
p1= qplot(BusinessTravel,data = data,geom="auto")
library(ggplot2)
library(ggplot2)
p1= qplot(BusinessTravel,data = data,geom="auto")
p2 = qplot(Gender, data=data,geom="auto")
p3 = qplot(JobLevel, data=data,geom="auto")
p4 = qplot(JobSatisfaction, data=data,geom="auto")
p5 = qplot(NumCompaniesWorked, data=data,geom="auto")
p6 = qplot(OverTime, data=data,geom="auto")
p7 = qplot(TotalWorkingYears, data=data,geom="auto")
p8 = qplot(YearsSinceLastPromotion, data=data,geom="auto")
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,nrow=4,ncol=2)
library(gridExtra)
library(grid)
library(ggplot2)
library(gridExtra)
library(grid)
library(ggplot2)
p1= qplot(BusinessTravel,data = data,geom="auto")
p2 = qplot(Gender, data=data,geom="auto")
p3 = qplot(JobLevel, data=data,geom="auto")
p4 = qplot(JobSatisfaction, data=data,geom="auto")
p5 = qplot(NumCompaniesWorked, data=data,geom="auto")
p6 = qplot(OverTime, data=data,geom="auto")
p7 = qplot(TotalWorkingYears, data=data,geom="auto")
p8 = qplot(YearsSinceLastPromotion, data=data,geom="auto")
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,nrow=4,ncol=2)
ux <- unique(df$Attrition)
ux <- unique(df$BusinessTravel)
unique(df$BusinessTravel)
df$Attrition[which(!duplicated(df$Attrition))]
a <- df$Attrition
a <- df[:,Attrition]
a <- df[,Attrition]
a <- df[,df$Attrition]
df = data
df$Attrition=as.numeric(factor(df$Attrition, levels = c('Yes', 'No'), labels =c(1,2)))
View(df)
df$BusinessTravel=as.numeric(factor(df$BusinessTravel, levels = c('Non-Travel', 'Travel_Frequently','Travel_Rarely'), labels =c(1,2,3)))
df$BusinessTravel=as.numeric(factor(df$BusinessTravel, levels = c('Non-Travel', +
'Travel_Frequently','Travel_Rarely'), labels =c(1,2,3)))
df$BusinessTravel=as.numeric(factor(df$BusinessTravel, levels = c('Non-Travel',
'Travel_Frequently','Travel_Rarely'), labels =c(1,2,3)))
df$Department=as.numeric(factor(df$Department, levels = c('Human Resources',
'Research & Development', 'Sales'), labels =c(1,2,3)))
df$EducationField=as.numeric(factor(df$EducationField, levels =
c('EducationField','Life Sciences','Other','Medical','Marketing',
'Technical Degree','Human Resources'), labels =c(1,2,3,4,5,6,7)))
df$Gender=as.numeric(factor(df$Gender, levels = c('Male', 'Female'), labels =c(1,2)))
df$JobRole=as.numeric(factor(df$JobRole, levels =
c('Sales Executive','Research Scientist','Laboratory Technician',
'Manufacturing Director','Healthcare Representative','Manager',
'Sales Representative', 'Research Director', 'Human Resources'),
labels =c(1,2,3,4,5,6,7,8,9)))
df$MaritalStatus=as.numeric(factor(df$MaritalStatus, levels = c('Single','Married','Divorced'), labels =c(1,2,3)))
df$OverTime=as.numeric(factor(df$OverTime, levels = c('Yes', 'No'), labels =c(1,2)))
df$BusinessTravel = data$BusinessTravel
df$BusinessTravel=as.numeric(factor(df$BusinessTravel, levels = c('Non-Travel',
'Travel_Frequently','Travel_Rarely'), labels =c(1,2,3)))
fit2 <- rpart(Attrition~., data=data, cp = .01)
rpart.plot(fit2,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
fit3 <- rpart(Attrition~OverTime+JobLevel+JobSatisfaction, data=data, cp = .01)
rpart.plot(fit3,type=2, fallen.leaves=TRUE, tweak = 1.5, extra = 100)
fit2 <- rpart(Attrition~., data=data, cp = .001)
rpart.plot(fit2,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
fit2 <- rpart(Attrition~., data=data, cp = .01)
rpart.plot(fit2,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
fit2 <- rpart(Attrition~., data=df, cp = .01)
rpart.plot(fit2,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
rpart.plot(fit1,type=1, fallen.leaves=TRUE, tweak = 2, extra = 100)
rpart.plot(fit1,type=2, fallen.leaves=TRUE, tweak = 2, extra = 100)
corTable=cor(df)
View(corTable)
corr=melt(corTable)
library(reshape2)
library(reshape2)
corr=melt(corTable)
View(corr)
corr
View(corTable)
corrTab <- corTable[,"Attrition"]
corrTab <- corTable[,corTable$Attrition]
n_cor <- normalize(corrTable, method = "standardize", range = c(0, 1))
normalize(corrTable, method = "standardize", range = c(0, 1))
require(stats)
n_cor <- normalize(corrTable, method = "standardize", range = c(0, 1))
n_cor <- normalize(corrTable, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
View(corr)
View(corTable)
corTable
c1 <-corTable
c1 <-corTable[,]
c1 <-corTable[,"Attrition"]
c1
corrplot( cor(as.matrix(df), method = "pearson", use = "complete.obs")
,is.corr = FALSE, type = "lower", order = "hclust", tl.col = "black", tl.srt = 360)
library(corrplot)
library(corrplot)
corrplot( cor(as.matrix(df), method = "pearson", use = "complete.obs")
,is.corr = FALSE, type = "lower", order = "hclust", tl.col = "black", tl.srt = 360)
corrplot( cor(as.matrix(df), method = "pearson", use = "complete.obs")
,is.corr = FALSE, type = "upper", order = "hclust", tl.col = "black", tl.srt = 360)
corrplot(corTable, method = "square")
corrplot(corTable, method = "number")
corrplot(corTable, method = "pie")
corrplot( cor(as.matrix(df), method = "pearson", use = "complete.obs")
,is.corr = FALSE, order = "hclust", tl.col = "black", tl.srt = 360)
M <-corTable=cor(df)
M = corTable=cor(df)
corrplot(M, order = "hclust", addrect = 2, col = col4(10))
col1 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "white",
"cyan", "#007FFF", "blue", "#00007F"))
col2 <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))
col3 <- colorRampPalette(c("red", "white", "blue"))
col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
"cyan", "#007FFF", "blue", "#00007F"))
whiteblack <- c("white", "black")
corrplot(M, order = "hclust", addrect = 2, col = col4(10))
corrplot(M, order = "hclust", addrect = 2, col = col1(100))
View(corr)
View(corTable)
corrplot(corTable, method = "square")
library(caTools)
library(caTools)
library(readxl)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(rpart)
library(rpart.plot)
library(e1071)
library(caTools)
library(rattle)
library(gridExtra)
library(ROCR)
library(ipred)
library(gbm)
library(C50)
library(randomForest)
library(randomForestSRC)
library(reshape2)
library(RColorBrewer)
library(readxl)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(rpart)
library(rpart.plot)
library(e1071)
library(caTools)
library(rattle)
library(gridExtra)
library(ROCR)
library(ipred)
library(gbm)
library(C50)
library(randomForest)
library(randomForestSRC)
library(reshape2)
library(RColorBrewer)
set.seed(3000)
split=sample.split(data$Attrition,SplitRatio = .7)
train=subset(data,split==T)
test=subset(data,split==F)
attLog=glm(Attrition~.,data=train,family = binomial)
attLog
predGlm=predict(attLog,type="response",newdata=test)
table(test$Attrition,predGlm>.5)
decisionTreeModel= rpart(Attrition~.,data=train,method="class",minbucket = 25)
fancyRpartPlot(decisionTreeModel)
predDT=predict(decisionTreeModel,newdata = test,type = "class")
table(test$Attrition,predDT)
randomForestModel=randomForest(Attrition~.,data=train,ntree=250,nodesize=12)
predictRF=predict(randomForestModel,newdata=test)
table(test$Attrition,predictRF)
predictRF
sum(predictRF)
summary(predictRF)
summary(predDT)
library(caret)
library(caret)
confusionMatrix(predDT)
confusionMatrix(predDT, test)
confusionMatrix(predDT, test[["class"]])
confusionMatrix(predDT, test["class"])
confusionMatrix(predDT, test$Attrition)
confusionMatrix(predictRF, test$Attrition)
glm_ROC=predict(attLog,test,type="response")
pred_glm=prediction(glm_ROC,test$Attrition)
perf_glm=performance(pred_glm,"tpr","fpr")
dt_ROC=predict(decisionTreeModel,test)
pred_dt=prediction(dt_ROC[,2],test$Attrition)
perf_dt=performance(pred_dt,"tpr","fpr")
RF_ROC=predict(randomForestModel,test,type="prob")
pred_RF=prediction(RF_ROC[,2],test$Attrition)
perf_RF=performance(pred_RF,"tpr","fpr")
auc_glm <- performance(pred_glm,"auc")
auc_glm <- round(as.numeric(auc_glm@y.values),3)
auc_dt <- performance(pred_dt,"auc")
auc_dt <- round(as.numeric(auc_dt@y.values),3)
auc_RF <- performance(pred_RF,"auc")
auc_RF <- round(as.numeric(auc_RF@y.values),3)
print(paste('AUC of Logistic Regression:',auc_glm))
print(paste('AUC of Decision Tree:',auc_dt))
print(paste('AUC of Random Forest:',auc_RF))
plot(perf_glm, main = "ROC curves for the models", col='blue')
plot(perf_dt,add=TRUE, col='red')
plot(perf_RF, add=TRUE, col='green3')
legend('bottom', c("Logistic Regression", "Decision Tree", "Random Forest"), fill = c('blue','red','green3'), bty='n')
plot(perf_glm, main = "ROC curves for the models", col='blue')
plot(perf_dt,add=TRUE, col='red')
plot(perf_RF, add=TRUE, col='green3')
legend('bottom', c("Logistic Regression", "Decision Tree", "Random Forest"), fill = c('blue','red','green3'), bty='n')
baggingmodel = bagging(Attrition~.,
data=train,control=rpart.control(cp=.00001))
predprobs = predict(baggingmodel,newdata = test,type="prob")
testwithprobs = cbind(test,predprobs[,2])
print(testwithprobs)
print(baggingmodel)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
fit.c50 <- train(Attrition~., data=test, method="C5.0", metric=metric, trControl=control)
fit.gbm <- train(Attrition~., data=test, method="gbm", metric=metric, trControl=control, verbose=FALSE)
boosting_results <- resamples(list(c5.0=fit.c50, gbm=fit.gbm))
summary(boosting_results)
dotplot(boosting_results)
gbm_dev <- predict(fit.gbm, train,type= "prob")[,2]
auc_gbm <- performance(gbm_dev,"auc")
auc_gbm <- performance(train$Attrition, gbm_dev)
auc_gbm <- performance(gbm_dev)
auc_gbm <- performance(gbm_dev,auc)
auc_gbm <- performance(gbm_dev,measure = auc)
auc_gbm <- performance(gbm_dev,"auc")
auc_gbm <- performance(gbm_dev, measure = "auc")
auc_gbm <- performance(gbm_dev, measure = "auc", x.measure = "fpr")
auc_gbm <- performance(gbm_dev, measure = 'auc')
auc_gbm <- performance(gbm_dev, "tpr")
library(ROCR)
auc_gbm <- performance(gbm_dev, "tpr")
auc_gbm <- performance(predprobs, "tpr")
auc_gbm <- performance(pred_RF, "tpr")
plot(auc_gbm)
auc_gbm <- performance(pred_RF, "auc")
plot(auc_gbm)
gbm_dev <- predict(fit.gbm, train,type= "prob")
auc_gbm <- performance(gbm_dev, 'auc')
